import math
import numpy as np

# --- Constants ---
ROWS = 6
COLS = 7
WINNING_LENGTH = 4

PLAYER_TOKEN = 1
AI_TOKEN = 2
EMPTY = 0

# --- Helper Functions ---
def create_board():
    """Creates an empty game board."""
    return np.zeros((ROWS, COLS), dtype=int)

def drop_piece(board, row, col, piece):
    """Places a piece on the board."""
    board[row][col] = piece
def is_valid_location(board, col):
    """Checks if a column is not full."""
    return board[0][col] == EMPTY
def get_next_open_row(board, col):
    """Finds the next available row in a column."""
    for r in range(ROWS - 1, -1, -1):
        if board[r][col] == EMPTY:
            return r
    return None
def get_valid_locations(board):
    """Returns a list of all columns that are not full."""
    return [c for c in range(COLS) if is_valid_location(board, c)]
def check_win(board, piece):
    """Checks if a player has won the game."""
    # Horizontal check
    for c in range(COLS - (WINNING_LENGTH - 1)):
        for r in range(ROWS):
            if all(board[r][c + i] == piece for i in range(WINNING_LENGTH)):
                return True
    # Vertical check
    for c in range(COLS):
        for r in range(ROWS - (WINNING_LENGTH - 1)):
            if all(board[r + i][c] == piece for i in range(WINNING_LENGTH)):
                return True
    # Positive diagonal check
    for c in range(COLS - (WINNING_LENGTH - 1)):
        for r in range(ROWS - (WINNING_LENGTH - 1)):
            if all(board[r + i][c + i] == piece for i in range(WINNING_LENGTH)):
                return True
    # Negative diagonal check
    for c in range(COLS - (WINNING_LENGTH - 1)):
        for r in range(WINNING_LENGTH - 1, ROWS):
            if all(board[r - i][c + i] == piece for i in range(WINNING_LENGTH)):
                return True
    return False
def is_terminal_node(board):
    """Determines if the game has ended."""
    return check_win(board, PLAYER_TOKEN) or check_win(board, AI_TOKEN) or len(get_valid_locations(board)) == 0

# --- AI Logic ---
def evaluate_window(window, piece):
    """Heuristically scores a 4-piece window."""
    score = 0
    opp_piece = PLAYER_TOKEN if piece == AI_TOKEN else AI_TOKEN
    if window.count(piece) == 4:
        score += 10000
    elif window.count(piece) == 3 and window.count(EMPTY) == 1:
        score += 10
    elif window.count(piece) == 2 and window.count(EMPTY) == 2:
        score += 5

    if window.count(opp_piece) == 3 and window.count(EMPTY) == 1:
        score -= 80
    return score
def score_position(board, piece):
    """Scores the entire board for the given piece."""
    score = 0
 # Center column preference
    center_array = [int(i) for i in list(board[:, COLS // 2])]
    center_count = center_array.count(piece)
    score += center_count * 6
 # Score horizontal, vertical, and diagonal windows
    for r in range(ROWS):
        for c in range(COLS - (WINNING_LENGTH - 1)):
            window = list(board[r, c:c+WINNING_LENGTH])
            score += evaluate_window(window, piece)
    for c in range(COLS):
        for r in range(ROWS - (WINNING_LENGTH - 1)):
            window = list(board[r:r+WINNING_LENGTH, c])
            score += evaluate_window(window, piece)
    for r in range(ROWS - (WINNING_LENGTH - 1)):
        for c in range(COLS - (WINNING_LENGTH - 1)):
            window = [board[r+i][c+i] for i in range(WINNING_LENGTH)]
            score += evaluate_window(window, piece)       
    for r in range(WINNING_LENGTH - 1, ROWS):
        for c in range(COLS - (WINNING_LENGTH - 1)):
            window = [board[r-i][c+i] for i in range(WINNING_LENGTH)]
            score += evaluate_window(window, piece)          
    return score
def minimax(board, depth, alpha, beta, maximizing_player):
    """Minimax algorithm with Alpha-Beta Pruning."""
    valid_locations = get_valid_locations(board)
    is_terminal = is_terminal_node(board)

    if depth == 0 or is_terminal:
        if is_terminal:
            if check_win(board, AI_TOKEN):
                return (None, 10000000)
            elif check_win(board, PLAYER_TOKEN):
                return (None, -10000000)
            else: # Game is over, no more valid moves
                return (None, 0)
        else: # Depth is zero
            return (None, score_position(board, AI_TOKEN))
    if maximizing_player:
        value = -math.inf
        column = np.random.choice(valid_locations)
        for col in valid_locations:
            row = get_next_open_row(board, col)
            b_copy = board.copy()
            drop_piece(b_copy, row, col, AI_TOKEN)
            new_score = minimax(b_copy, depth - 1, alpha, beta, False)[1]
            if new_score > value:
                value = new_score
                column = col
            alpha = max(alpha, value)
            if alpha >= beta:
                break
        return column, value
    else: # Minimizing player
        value = math.inf
        column = np.random.choice(valid_locations)
        for col in valid_locations:
            row = get_next_open_row(board, col)
            b_copy = board.copy()
            drop_piece(b_copy, row, col, PLAYER_TOKEN)
            new_score = minimax(b_copy, depth - 1, alpha, beta, True)[1]
            if new_score < value:
                value = new_score
                column = col
            beta = min(beta, value)
            if alpha >= beta:
                break
        return column, value
def find_best_move(board, difficulty):
    """
    Entry point for the AI to find its best move.
    The difficulty corresponds to the search depth.
    """
    return minimax(board, difficulty, -math.inf, math.inf, True)[0]
